{"version":3,"sources":["components/Navbar.js","utils/API.js","components/SearchForm.js","components/SearchResults.js","components/Container.js","App.js","serviceWorker.js","index.js"],"names":["Navbar","className","style","color","backgroundColor","borderBottom","borderBottomColor","axios","get","SearchForm","props","list","width","type","placeholder","onChange","handleInputChange","value","SearchResults","marginLeft","marginRight","results","map","result","key","login","uuid","src","picture","thumbnail","alt","name","first","last","cell","email","format","dob","date","Container","state","search","employees","filterEmployees","order","event","searchInput","target","filter","employee","toLowerCase","indexOf","setState","searchEmployees","API","then","res","data","catch","err","console","log","this","Component","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","error","message"],"mappings":"+QAkBeA,MAhBf,WACE,OACE,yBACEC,UAAU,wBACVC,MAAO,CACLC,MAAO,QACPC,gBAAiB,UACjBC,aAAc,QACdC,kBAAmB,QAGrB,oD,iDCXS,EACI,WACf,OAAOC,IAAMC,IAAI,iDCgBNC,MAlBf,SAAoBC,GAClB,OACE,0BAAMT,UAAU,mBACd,yBAAKA,UAAU,cACb,2BACEU,KAAK,YACLT,MAAO,CAAEU,MAAO,SAChBC,KAAK,OACLZ,UAAU,eACVa,YAAY,SACZC,SAAUL,EAAMM,kBAChBC,MAAOP,EAAMO,W,iBC2BRC,MArCf,SAAuBR,GACrB,OACE,2BACET,UAAU,gBACVC,MAAO,CAAEiB,WAAY,OAAQC,YAAa,SAE1C,+BACE,wBAAInB,UAAU,eACZ,qCACA,oCACA,qCACA,qCACA,qCAGJ,2BAAOA,UAAU,eACdS,EAAMW,QAAQC,KAAI,SAACC,GAAD,OACjB,wBAAItB,UAAU,QAAQuB,IAAKD,EAAOE,MAAMC,MACtC,4BACE,yBACEzB,UAAU,GACV0B,IAAKJ,EAAOK,QAAQC,UACpBC,IAAI,qBAGR,4BAAKP,EAAOQ,KAAKC,MAAQ,IAAMT,EAAOQ,KAAKE,MAC3C,4BAAKV,EAAOW,MACZ,4BAAKX,EAAOY,OACZ,4BACE,kBAAC,IAAD,CAAQC,OAAO,cAAcb,EAAOc,IAAIC,cC4BvCC,E,4MAtDbC,MAAQ,CACNC,OAAQ,GACRC,UAAW,GACXC,gBAAiB,GACjBC,MAAO,W,EAaT5B,kBAAoB,SAAC6B,GACnB,IAAMH,EAAY,EAAKF,MAAME,UACvBI,EAAcD,EAAME,OAAO9B,MAC3B0B,EAAkBD,EAAUM,QAChC,SAACC,GAAD,OACEA,EAASlB,KAAKC,MAAMkB,cAAcC,QAAQL,EAAYI,gBACrD,KAEL,EAAKE,SAAS,CACZT,qB,EAKJU,gBAAkB,WAChBC,IACGC,MAAK,SAACC,GAAD,OACJ,EAAKJ,SAAS,CACZT,gBAAiBa,EAAIC,KAAKpC,QAC1BqB,UAAWc,EAAIC,KAAKpC,aAGvBqC,OAAM,SAACC,GAAD,OAASC,QAAQC,IAAIF,O,kEAjCX,IAAD,OAClBL,IACGC,MAAK,SAACC,GAAD,OACJ,EAAKJ,SAAS,CACZV,UAAWc,EAAIC,KAAKpC,QACpBsB,gBAAiBa,EAAIC,KAAKpC,aAG7BqC,OAAM,SAACC,GAAD,OAASC,QAAQC,IAAIF,Q,+BA4B9B,OACE,6BACE,kBAAC,EAAD,CACE3C,kBAAmB8C,KAAK9C,kBACxBiC,SAAUa,KAAKtB,MAAME,YAEvB,kBAAC,EAAD,CAAerB,QAASyC,KAAKtB,MAAMG,uB,GAjDnBoB,aCUTC,MATf,WACE,OACE,kBAAC,IAAD,KACE,kBAAC,EAAD,MACA,kBAAC,EAAD,QCEcC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2D,MCXNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDwHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBtB,MAAK,SAAAuB,GACJA,EAAaC,gBAEdrB,OAAM,SAAAsB,GACLpB,QAAQoB,MAAMA,EAAMC,c","file":"static/js/main.35dda457.chunk.js","sourcesContent":["import React from \"react\";\r\n\r\nfunction Navbar() {\r\n  return (\r\n    <div\r\n      className=\"jumbotron text-center\"\r\n      style={{\r\n        color: \"white\",\r\n        backgroundColor: \"#052675\",\r\n        borderBottom: \"solid\",\r\n        borderBottomColor: \"red\",\r\n      }}\r\n    >\r\n      <h1>Employee Directory</h1>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Navbar;\r\n","import axios from \"axios\";\r\n\r\nexport default {\r\n  getEmployeeList: function () {\r\n    return axios.get(\"https://randomuser.me/api/?results=60&nat=us\");\r\n  },\r\n};\r\n","import React from \"react\";\r\n\r\nfunction SearchForm(props) {\r\n  return (\r\n    <form className=\"search offset-5\">\r\n      <div className=\"form-group\">\r\n        <input\r\n          list=\"employees\"\r\n          style={{ width: \"16rem\" }}\r\n          type=\"text\"\r\n          className=\"form-control\"\r\n          placeholder=\"Search\"\r\n          onChange={props.handleInputChange}\r\n          value={props.value}\r\n        />\r\n      </div>\r\n    </form>\r\n  );\r\n}\r\n\r\nexport default SearchForm;\r\n","import React from \"react\";\r\nimport Moment from \"react-moment\";\r\n\r\nfunction SearchResults(props) {\r\n  return (\r\n    <table\r\n      className=\"table-striped\"\r\n      style={{ marginLeft: \"auto\", marginRight: \"auto\" }}\r\n    >\r\n      <thead>\r\n        <tr className=\"text-center\">\r\n          <th>Image</th>\r\n          <th>Name</th>\r\n          <th>Phone</th>\r\n          <th>Email</th>\r\n          <th>DOB</th>\r\n        </tr>\r\n      </thead>\r\n      <tbody className=\"text-center\">\r\n        {props.results.map((result) => (\r\n          <tr className=\"table\" key={result.login.uuid}>\r\n            <td>\r\n              <img\r\n                className=\"\"\r\n                src={result.picture.thumbnail}\r\n                alt=\"employee-selfie\"\r\n              />\r\n            </td>\r\n            <td>{result.name.first + \" \" + result.name.last}</td>\r\n            <td>{result.cell}</td>\r\n            <td>{result.email}</td>\r\n            <td>\r\n              <Moment format=\"MM/DD/YYYY\">{result.dob.date}</Moment>\r\n            </td>\r\n          </tr>\r\n        ))}\r\n      </tbody>\r\n    </table>\r\n  );\r\n}\r\nexport default SearchResults;\r\n","import React, { Component } from \"react\";\r\nimport API from \"../utils/API\";\r\nimport SearchForm from \"../components/SearchForm\";\r\nimport SearchResults from \"../components/SearchResults\";\r\n\r\nclass Container extends Component {\r\n  state = {\r\n    search: \"\",\r\n    employees: [],\r\n    filterEmployees: [],\r\n    order: \"descend\",\r\n  };\r\n  componentDidMount() {\r\n    API.getEmployeeList()\r\n      .then((res) =>\r\n        this.setState({\r\n          employees: res.data.results,\r\n          filterEmployees: res.data.results,\r\n        })\r\n      )\r\n      .catch((err) => console.log(err));\r\n  }\r\n  //When the search input changes it filters by name\r\n  handleInputChange = (event) => {\r\n    const employees = this.state.employees;\r\n    const searchInput = event.target.value;\r\n    const filterEmployees = employees.filter(\r\n      (employee) =>\r\n        employee.name.first.toLowerCase().indexOf(searchInput.toLowerCase()) >\r\n        -1\r\n    );\r\n    this.setState({\r\n      filterEmployees,\r\n    });\r\n  };\r\n\r\n  //API call when page refreshes\r\n  searchEmployees = () => {\r\n    API.getEmployeeList()\r\n      .then((res) =>\r\n        this.setState({\r\n          filterEmployees: res.data.results,\r\n          employees: res.data.results,\r\n        })\r\n      )\r\n      .catch((err) => console.log(err));\r\n  };\r\n  render() {\r\n    return (\r\n      <div>\r\n        <SearchForm\r\n          handleInputChange={this.handleInputChange}\r\n          employee={this.state.employees}\r\n        />\r\n        <SearchResults results={this.state.filterEmployees} />\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Container;\r\n","import React from \"react\";\nimport \"./App.css\";\nimport { BrowserRouter as Router } from \"react-router-dom\";\nimport Navbar from \"../src/components/Navbar\";\nimport Container from \"../src/components/Container\";\n\nfunction App() {\n  return (\n    <Router>\n      <Navbar />\n      <Container />\n    </Router>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\nimport \"bootstrap/dist/css/bootstrap.min.css\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}